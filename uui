#!/bin/bash
#-------------------------------------------------------------------------------
#Created by helmuthdu mailto: helmuthdu[at]gmail[dot]com
#-------------------------------------------------------------------------------
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------

#VARIABLES {{{
# DESKTOP ENVIRONMENT {{{
E17=0
GNOME=0
KDE=0
LXDE=0
OPENBOX=0
XFCE=0
#}}}
# PACKAGE MANAGER {{{
APTGET=0
APTITUDE=0
#}}}
# MAIN MENU {{{
BASICSETUP=0
DESKTOPENVIRONMENT=0
ACCESSORIES=0
DEVELOPMENT=0
OFFICE=0
SYSTEM=0
GRAPHICS=0
INTERNET=0
AUDIO=0
VIDEO=0
LAMP=0
FONTS=0
FONTSCONFIG=0
CLEANPACKAGES=0
#}}}
# ARCH {{{
ARCHI=`uname -m`
#}}}
# PROMPT {{{
prompt1="Enter your option: "
prompt2="Enter nÂ° of options (ex: 1 2 3 or 1-3): "
#}}}
# COLORS {{{
# Regular Colors
Black='\e[0;30m'        # Black
Blue='\e[0;34m'         # Blue
Cyan='\e[0;36m'         # Cyan
Green='\e[0;32m'        # Green
Purple='\e[0;35m'       # Purple
Red='\e[0;31m'          # Red
White='\e[0;37m'        # White
Yellow='\e[0;33m'       # Yellow
# Bold
BBlack='\e[1;30m'       # Black
BBlue='\e[1;34m'        # Blue
BCyan='\e[1;36m'        # Cyan
BGreen='\e[1;32m'       # Green
BPurple='\e[1;35m'      # Purple
BRed='\e[1;31m'         # Red
BWhite='\e[1;37m'       # White
BYellow='\e[1;33m'      # Yellow
#}}}
AUTOMATIC_MODE=0
#}}}
#SUPPORT FUNCTIONS {{{
  function read_input(){ #{{{
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
      OPTION=$1
    else
      read -p "$prompt1" OPTION
    fi
  } #}}}
  function read_input_text(){ #{{{
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
      OPTION=$2
    else
      read -p "$1 [y/N]: " OPTION
      echo ""
    fi
    OPTION=`echo "$OPTION" | tr '[:upper:]' '[:lower:]'`
  } #}}}
  function read_input_options(){ #{{{
    local line
    local packages
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
      array=("$1")
    else
      read -p "$prompt2" OPTION
      array=("$OPTION")
    fi
    for line in ${array[@]/,/ }; do
      if [[ ${line/-/} != $line ]]; then
        for ((i=${line%-*}; i<=${line#*-}; i++)); do
          packages+=($i);
        done
      else
        packages+=($line)
      fi
    done
    OPTIONS=("${packages[@]}")
  } #}}}
  function print_line(){ #{{{
    printf "%$(tput cols)s\n"|tr ' ' '-'
  } #}}}
  function print_title (){ #{{{
    clear
    print_line
    echo -e "# ${BWhite}$1${White}"
    print_line
    echo ""
  } #}}}
  function print_info (){ #{{{
    T_COLS=`tput cols`
    echo -e "${BWhite}$1${White}\n" | fold -sw $(( $T_COLS - 18 )) | sed 's/^/\t/'
  } #}}}
  function print_warning (){ #{{{
    echo -e "${BRed}$1${White}\n"
  } #}}}
  function check_package(){ #{{{
    for PACKAGE in $1; do
      dpkg -l $PACKAGE &> /dev/null && return 0;
      ls /usr/share/applications/ | grep $PACKAGE &> /dev/null && return 0;
    done
    return 1
  } #}}}
  function checkbox(){ #{{{
    [[ $1 -eq 1 ]] && echo -e "${BBlue}[${BWhite}X${BBlue}]${White}" || echo -e "${BBlue}[${White} ${BBlue}]${White}";
  } #}}}
  function checkbox_package(){ #{{{
    check_package "$1" && checkbox 1 || checkbox 0
  } #}}}
  function check_repository(){ #{{{
    REPONAME=`echo "$1" | sed 's/.*\://' | sed 's/\//-/'`
    if ls /etc/apt/sources.list.d/ | grep $REPONAME &>/dev/null; then
      echo -e "\nWARNING: $REPONAME repository already configured"
    else
      add-apt-repository -y $1
      apt-get update
      echo -e "\n$REPONAME repository added into sources.list.d direcotry"
      pause_function
    fi
  } #}}}
  function package_install(){ #{{{
    for PACKAGE in $1; do
      if ! check_package "$PACKAGE" ; then
        if [[ $APTITUDE -eq 1 ]]; then
          su -l $USERNAME --command="sudo aptitude install -y $PACKAGE"
        else
          su -l $USERNAME --command="sudo apt-get install -y $PACKAGE"
        fi
      else
        echo -e "Warning: $PACKAGE is up to date --skipping"
      fi
    done
  } #}}}
  function download_package(){ #{{{
    PACKAGE_NAME=`echo "$1" | sed 's/.*\///'`
    [[ ! -d downloaded_packages ]] && sudo -u $USERNAME mkdir downloaded_packages;
    cd downloaded_packages
    [[ ! -f $PACKAGE_NAME ]] && wget $1;
    case "$PACKAGE_NAME" in
      *.deb)
        dpkg -i $PACKAGE_NAME
        apt-get install -fy
        ;;
      *.zip)
        unzip $PACKAGE_NAME -d $2
        chmod -R 755 $2/$PACKAGE_NAME
        ;;
      *.tar.gz)
        tar zxvf $PACKAGE_NAME -C $2
        chmod -R 755 $2/$PACKAGE_NAME
        ;;
    esac
  } #}}}
  function package_remove(){ #{{{
    if [[ $AUTOMATIC_MODE -eq 1 ]]; then
      apt-get remove --purge -y $1
    else
      apt-get remove --purge $1
    fi
  } #}}}
  function contains_element(){ #{{{
    for e in "${@:2}"; do [[ $e == $1 ]] && break; done;
  } #}}}
  function invalid_option(){ #{{{
    print_line
    echo "Invalid option. Try another one."
    pause_function
  } #}}}
  function pause_function(){ #{{{
    print_line
    if [[ $AUTOMATIC_MODE -ne 1 ]]; then
      read -e -sn 1 -p "Press any key to continue..."
    fi
  } #}}}
  function sumary(){ #{{{
    case $CURRENT_STATUS in
      1)
        print_line
        echo "$1 successful"
        ;;
      *)
        print_line
        echo "$1 not successful (Canceled)"
        ;;
    esac
  } #}}}
  function menu_item(){ #{{{
    [[ $# -lt 2 ]] && PACKAGE_NAME="$1" || PACKAGE_NAME="$2";
    CHARS_TO_REMOVE=("Ttf-" "-bzr" "-hg" "-svn" "-git" "-bin" "-stable" "Gnome-shell-theme-" "Gnome-shell-extensions-");
    for CHARS in ${CHARS_TO_REMOVE[@]}; do PACKAGE_NAME=`echo ${PACKAGE_NAME^} | sed 's/'$CHARS'//'`; done
    echo -e "$(checkbox_package "$1") ${BWhite}$PACKAGE_NAME${White}"
  } #}}}
  function mainmenu_item(){ #{{{
    echo -e "$(checkbox "$1") ${BWhite}$2${White}"
  } #}}}
  function elihw() { #{{{
    [[ $OPT == b || $OPT == d ]] && break;
  } #}}}
#}}}

#WELCOME {{{
function welcome(){
  clear
  echo -e "${BWhite}Welcome to the Ubuntu Ultimate install script by helmuthdu${White}"
  print_line
  echo "Requirements:"
  echo "-> Ubuntu Distro"
  echo "-> Run script as root user"
  echo "-> Working internet connection"
  print_line
  echo "Script can be cancelled at any time with CTRL+C"
  print_line
  echo "This version is still in ALPHA. Send bugreports to: "
  echo "http://www.github.com/helmuthdu/uui"
  pause_function
}
#}}}
#CHECK ROOT {{{
function check_root() {
  CURRENTUSER="$(whoami)"
  if [[ $CURRENTUSER != root ]]; then
    echo "Current user is NOT 'root'. EXIT now"
    pause_function
    exit 1
  fi
}
#}}}
#LANGUAGE SELECTOR {{{
function language_selector(){
  #DETECTS THE SYSTEM LANGUAGE {{{
  #automatically detects the system language based on your rc.conf
  LANGUAGE=`locale | sed '1!d' | sed 's/LANG=//' | cut -c1-5`
  #KDE #{{{
  if [ $LANGUAGE = "pt_BR" ]; then
    LANGUAGE_KDE="ptbr"
  elif [ $LANGUAGE = "en_GB" ] || [ $LANGUAGE = "en_US" ]; then
    LANGUAGE_KDE="engb"
  else
    LANGUAGE_KDE=`echo $LANGUAGE | cut -d\_ -f1`
  fi
  #}}}
  #FIREFOX #{{{
  LANGUAGE_FF=`echo $LANGUAGE | cut -d\_ -f1`
  #}}}
  #HUNSPELL #{{{
  LANGUAGE_HS=`echo $LANGUAGE | cut -d\_ -f1`
  #}}}
  #ASPELL #{{{
  LANGUAGE_AS=`echo $LANGUAGE | cut -d\_ -f1`
  #}}}
  #LIBREOFFICE #{{{
  LANGUAGE_LO=`echo $LANGUAGE | cut -d\_ -f1`
  #}}}
  #}}}
  print_title "LANGUAGE"
  read_input_text "Default system language: \"$LANGUAGE\"" $LANGSELECT
  case "$OPTION" in
    "n")
      read -p "New system language [ex: en_US]: " LANGUAGE
      #KDE #{{{
      if [ $LANGUAGE = "pt_BR" ]; then
        LANGUAGE_KDE="ptbr"
      elif [ $LANGUAGE = "en_GB" ] || [ $LANGUAGE = "en_US" ]; then
        LANGUAGE_KDE="engb"
      else
        LANGUAGE_KDE=`echo $LANGUAGE | cut -d\_ -f1`
      fi
      #}}}
      #FIREFOX #{{{
      LANGUAGE_FF=`echo $LANGUAGE | cut -d\_ -f1`
      #}}}
      #HUNSPELL #{{{
      LANGUAGE_HS=`echo $LANGUAGE | cut -d\_ -f1`
      #}}}
      #ASPELL #{{{
      LANGUAGE_AS=`echo $LANGUAGE | cut -d\_ -f1`
      #}}}
      #LIBREOFFICE #{{{
      LANGUAGE_LO=`echo $LANGUAGE | cut -d\_ -f1`
      #}}}
      ;;
    *)
      ;;
  esac
  pause_function
}
#}}}
#PACKAGE MANAGER {{{
function select_pkgmanager(){
  print_title "PACKAGE MANAGER"
  aurhelper=("apt-get" "aptitude")
  PS3="$prompt1"
  echo -e "Choose your default package manager\n"
  select OPT in "${aurhelper[@]}"; do
    case "$REPLY" in
      1)
        APTGET=1
        CURRENT_STATUS=1
        break
        ;;
      2)
        apt-get install aptitude
        CURRENT_STATUS=1
        APTITUDE=1
        break
        ;;
      *)
        invalid_option
        ;;
    esac
  done
  sumary "AUR Helper installation"
  pause_function
}
#}}}
#CUSTOM REPOSITORIES {{{
function custom_repositories(){
  print_title "CUSTOM REPOSITORIES"
  read_input_text "Add custom repositories" $CUSTOMREPO
  case "$OPTION" in
    "y")
      #CUSTOM REPOSITORIES {{{
      while [ 1 ]
      do
        print_title "CUSTOM REPOSITORIES"
        echo " 1) Elementary"
        echo " 2) Globus Preview"
        echo " 3) GNOME 3"
        echo " 4) Jdownloader"
        echo " 5) Medibuntu"
        echo " 6) Themes/Icons"
        echo " 7) Ubuntu-tweak"
        echo " 8) Webupd8"
        echo ""
        echo " a) \"Add Custom\""
        echo ""
        echo " d) DONE"
        echo ""
        CUSTOMREPO+=" d"
        read_input_options "$CUSTOMREPO"
        for OPT in ${OPTIONS[@]}; do
          case $OPT in
            1)
              check_repository "ppa:elementary-os/daily"
              check_repository "ppa:nemequ/sqlheavy"
              ;;
            2)
              check_repository "ppa:gloobus-dev/gloobus-preview"
              ;;
            3)
              check_repository "ppa:webupd8team/gnome3"
              ;;
            4)
              check_repository "ppa:jd-team/jdownloader"
              ;;
            5)
              if ls /etc/apt/sources.list.d/ | grep "medibuntu" &> /dev/null; then
                echo -e "\nWARNING: medibuntu repository already configured"
              else
                wget --output-document=/etc/apt/sources.list.d/medibuntu.list http://www.medibuntu.org/sources.list.d/$(lsb_release -cs).list
                apt-get update
                apt-get --yes --quiet --allow-unauthenticated install medibuntu-keyring
                apt-get update
              fi
              pause_function
              ;;
            6)
              check_repository "ppa:tiheum/equinox"
              check_repository "ppa:webupd8team/themes"
              ;;
            7)
              check_repository "ppa:ubuntu-tweak-testing/ppa"
              ;;
            8)
              check_repository "ppa:nilarimogard/webupd8"
              ;;
            "a")
              read -p "Repository Name [ex: elementary-os/daily]: " REPONAME
              check_repository "ppa:$REPONAME"
              ;;
            "d")
              break
              ;;
            *)
              invalid_option
              ;;
          esac
        done
        elihw
      done
      CURRENT_STATUS=1
      ;;
      #}}}
      *)
      CURRENT_STATUS=0
      ;;
  esac
  sumary "Custom repositories configuration"
  pause_function
}
#}}}
#SYSTEM UPDATE {{{
function system_upgrade(){
  print_title "UPDATING YOUR SYSTEM"
  read -p "Update your system [y/N]: " OPTION
  if [ $OPTION = "y" ]; then
    apt-get update
    apt-get upgrade
  fi
}
#}}}
#SELECT/CREATE USER {{{
function select_user(){
  #CREATE NEW USER {{{
  function create_new_user(){
  read -p "Username: " USERNAME
  useradd -m -g users -G  adm,cdrom,sudo,dip,plugdev,lpadmin,sambashare -s /bin/bash $USERNAME
  passwd $USERNAME
  configure_user_account
      } #}}}
  #CONFIGURE USER ACCOUNT {{{
  configure_user_account(){
    #BASHRC {{{
    print_title "BASHRC - https://wiki.archlinux.org/index.php/Bashrc"
    BASHRC=("Default" "Vanilla" "Get from github");
    PS3="$prompt1"
    echo -e "Choose your .bashrc\n"
    select OPT in "${BASHRC[@]}"; do
      case "$REPLY" in
        1)
          package_install "git"
          git clone https://github.com/helmuthdu/dotfiles
          cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc ~/
          cp dotfiles/.bashrc dotfiles/.dircolors dotfiles/.dircolors_256 dotfiles/.nanorc /home/$USERNAME/
          mkdir -p /home/$USERNAME/.config/fontconfig
          cp -i dotfiles/fonts.conf /home/$USERNAME/.config/fontconfig
          rm -fr dotfiles
          break
          ;;
        2)
          cp /etc/skel/.bashrc ~/home/$USERNAME
          break
          ;;
        3)
          package_install "git"
          read -p "Enter your github username [ex: helmuthdu]: " GITHUB_USER
          read -p "Enter your github repository [ex: aui]: " GITHUB_REPO
          git clone https://github.com/$GITHUB_USER/$GITHUB_REPO
          cp -R $GITHUB_REPO/.* /home/$USERNAME/
          rm -fr $GITHUB_REPO
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    #}}}
    #EDITOR {{{
    print_title "DEFAULT EDITOR"
    EDITORS=("Emacs" "Joe" "Nano" "Vim");
    PS3="$prompt1"
    echo -e "Choose default editor\n"
    select OPT in "${EDITORS[@]}"; do
      case "$REPLY" in
        1)
          package_install "emacs"
          EDITOR=emacs
          break
          ;;
        2)
          package_install "joe"
          EDITOR=joe
          break
          ;;
        3)
          EDITOR=nano
          break
          ;;
        4)
          package_install "vim exuberant-ctags"
          #VIMRC {{{
          VIMRC=("Default" "Vanilla" "Get from github");
          PS3="$prompt1"
          echo -e "Choose your .vimrc\n"
          select OPT in "${VIMRC[@]}"; do
            case "$REPLY" in
              1)
                package_install "git"
                git clone https://github.com/helmuthdu/vim
                mv vim /home/$USERNAME/.vim
                ln -sf /home/$USERNAME/.vim/vimrc /home/$USERNAME/.vimrc
                # PENTADACTYL [FIREFOX]
                git clone https://github.com/helmuthdu/pentadactyl
                mv pentadactyl /home/$USERNAME/.pentadactyl
                ln -sf /home/$USERNAME/.pentadactyl/pentadactylrc /home/$USERNAME/.pentadactylrc
                break
                ;;
              2)
                break
                ;;
              3)
                package_install "git"
                read -p "Enter your github username [ex: helmuthdu]: " GITHUB_USER
                read -p "Enter your github repository [ex: vim]: " GITHUB_REPO
                git clone https://github.com/$GITHUB_USER/$GITHUB_REPO
                cp -R $GITHUB_REPO/.vim /home/$USERNAME/
                if [[ -f $GITHUB_REPO/.vimrc ]]; then
                  cp $GITHUB_REPO/.vimrc /home/$USERNAME/
                else
                  ln -sf /home/$USERNAME/.vim/vimrc /home/$USERNAME/.vimrc
                fi
                rm -fr $GITHUB_REPO
                break
                ;;
              *)
                invalid_option
                ;;
            esac
          done
          #}}}
          EDITOR=vim
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    #}}}
    chown -R $USERNAME:users /home/$USERNAME
  }
  #}}}
  print_title "SELECT USER ACCOUNT"
  users=(`cat /etc/passwd | ls "/home" | sed 's/\///' | cut -d: -f1`);
  PS3="$prompt1"
  echo "Avaliable Users:"
  if [ $(( ${#users[@]} )) -gt 0 ]; then
    echo -e "WARNING: THE SELECTED USER MUST HAVE SUDO PRIVILEGES\n"
  else
    echo ""
  fi
  select OPT in "${users[@]}" "Create new user"; do
    if [ "$OPT" == "Create new user" ]; then
      create_new_user
      break
    elif contains_element "$OPT" "${users[@]}"; then
      USERNAME=$OPT
      break
    else
      invalid_option
    fi
  done
  [[ ! -f /home/$USERNAME/.bashrc ]] && configure_user_account;
}
#}}}
#AUTOMATIC MODE{{{
function automatic_mode(){
  print_title "AUTOMATIC MODE"
  print_info "Create a custom install with all options pre-selected.\nUse this option with care."
  print_warning "\tUse this mode only if you already know all the option.\n\tYou won't be able to select anything later."
  read_input_text "Enable Automatic Mode"
  if [[ $OPTION == y ]]; then
    if $EDITOR &> /dev/null; then
      nano auiscript
    else
      $EDITOR auiscript
    fi
    echo -e "The installation will start now."
    pause_function
    AUTOMATIC_MODE=1
  fi
  source uuiscript
}
#}}}
#BASIC SETUP{{{
function install_basic_setup(){
  print_title "(UN)COMPRESS TOOLS"
  package_install "zip unzip unrar p7zip"
  print_title "SSH"
  print_info "Secure Shell (SSH) is a network protocol that allows data to be exchanged over a secure channel between two computers."
  package_install "openssh-server"
  print_title "Preload"
  print_info "Preload is a program which runs as a daemon and records statistics about usage of programs using Markov chains; files of more frequently-used programs are, during a computer's spare time, loaded into memory. This results in faster startup times as less data needs to be fetched from disk. preload is often paired with prelink."
  package_install "preload"
  print_title "ZRam"
  print_info "Zram creates a device in RAM and compresses it. If you use for swap means that part of the RAM can hold much more information but uses more CPU. Still, it is much quicker than swapping to a hard drive. If a system often falls back to swap, this could improve responsiveness. Zram is in mainline staging (therefore its not stable yet, use with caution)."
  package_install "zram-config"
  print_title "Apport"
  print_info ""
  package_remove "apport apport-symptoms"
}
#}}}
#VIDEO CARDS {{{
function install_video_cards(){
  print_title "VIDEO CARD"
  echo "Select your GPU:"
  echo " 1) ATI"
  echo " 2) nVidia"
  echo " 2) Virtualbox"
  echo ""
  echo " s) SKIP"
  echo ""
  read_input $VIDEOCARD
  case "$OPTION" in
    1)
      package_install "fglrx"
      CURRENT_STATUS=1
      sumary "ATI GPU driver installation"
      ;;
    2)
      package_install "nvidia-current"
      CURRENT_STATUS=1
      sumary "nVidia GPU driver installation"
      ;;
    3)
      package_install "virtualbox-guest-additions"
      gpasswd -a $USERNAME vboxsf
      CURRENT_STATUS=1
      sumary "Virtualbox guest additions (incl. video drivers) installation"
      ;;
    *)
      CURRENT_STATUS=0
      sumary "GPU drivers installation"
      ;;
  esac
  pause_function
}
#}}}
#GIT ACCESS THRU A FIREWALL {{{
function install_git_tor(){
  print_title "GIT-TOR"
  read_input_text "Ensuring access to GIT through a firewall (bypass college firewall)" $GITTOR
  case "$OPTION" in
    "y")
      package_install "netcat-openbsd vidalia privoxy git"
      if [ ! -f /usr/bin/proxy-wrapper ]; then
        echo 'forward-socks5   /               127.0.0.1:9050 .' >> /etc/privoxy/config
        echo -e '#!/bin/bash\nnc -xlocalhost:9050 -X5 $*' > /usr/bin/proxy-wrapper
        chmod +x /usr/bin/proxy-wrapper
        echo -e '\nexport GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"' >> /etc/bash.bashrc
        export GIT_PROXY_COMMAND="/usr/bin/proxy-wrapper"
        su -l $USERNAME --command="export GIT_PROXY_COMMAND=\"/usr/bin/proxy-wrapper\""
      fi
      CURRENT_STATUS=1
      ;;
    *)
      CURRENT_STATUS=0
      ;;
  esac
  sumary "GIT-TOR installation"
  pause_function
}
#}}}
#DESKTOP ENVIRONMENT {{{
function install_desktop_environment(){
  function install_icons() { #{{{
    check_repository "ppa:tiheum/equinox"
    check_repository "ppa:webupd8team/themes"
    while [[ 1 ]]
    do
      print_title "GNOME ICONS"
      echo " 1) $(menu_item "faenza-icon-theme" "Faenza")"
      echo " 2) $(menu_item "faenza-cupertino" "Faenza-Cupertino")"
      echo " 3) $(menu_item "faience-icon-theme" "Faience")"
      echo " 4) $(menu_item "elementary-icon-theme" "Elementary")"
      echo ""
      echo " b) BACK"
      echo ""
      GNOME_ICONS+=" b"
      read_input_options "$GNOME_ICONS"
      for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
          1)
            package_install "faenza-icon-theme"
            ;;
          2)
            package_install "faenza-cupertino"
            ;;
          3)
            package_install "faience-icon-theme"
            ;;
          4)
            package_install "elementary-icon-theme"
            ;;
          "b")
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      elihw
    done
  } #}}}
  function install_themes() { #{{{
    check_repository "ppa:webupd8team/themes"
    check_repository "ppa:elementary-os/daily"
    check_repository "ppa:tiheum/equinox"
    while [[ 1 ]]
    do
      print_title "GTK2/GTK3 THEMES"
      echo " 1) $(menu_item "shimmer-themes" "Greybird")"
      echo " 2) $(menu_item "elementary-theme" "eGTK")"
      echo " 3) $(menu_item "faience-theme" "Faience")"
      echo " 4) $(menu_item "adwaita-x-dark-theme" "Adwaita-X Dark")"
      echo " 5) $(menu_item "adwaita-x-light-theme" "Adwaita-X Light")"
      echo ""
      echo " b) BACK"
      echo ""
      GTK_THEMES+=" b"
      read_input_options "$GTK_THEMES"
      for OPT in ${OPTIONS[@]}; do
        case "$OPT" in
          1)
            package_install "shimmer-themes"
            ;;
          2)
            package_install "elementary-theme"
            ;;
          3)
            package_install "faience-theme"
            ;;
          4)
            package_install "adwaita-x-dark-theme"
            ;;
          5)
            package_install "adwaita-x-light-theme"
            ;;
          "b")
            break
            ;;
          *)
            invalid_option
            ;;
        esac
      done
      elihw
    done
  } #}}}
  print_title "DESKTOP ENVIRONMENT"
  print_info "Desktop environments provide a complete graphical user interface (GUI) for a system by bundling together a variety of X clients written using a common widget toolkit and set of libraries."
  echo -e "Choose your desktop-environment:\n"
  echo " 1) Pantheon"
  echo " 2) Gnome Shell"
  echo " 3) KDE"
  echo " 4) Unity"
  echo ""
  echo " b) BACK"
  read_input $DESKTOPENV
  case "$OPTION" in
    1)
    #PANTHEON {{{
      check_repository "ppa:elementary-os/stable"
      check_repository "ppa:elementary-os/testing"
      check_repository "ppa:elementary-os/daily"
      check_repository "ppa:audience-members/ppa"
      check_repository "ppa:vala-team/ppa"
      print_title "PANTHEON"
      package_install "elementary-desktop audience"
      CURRENT_STATUS=1
      GNOME=1
      ;;
    #}}}
    2)
    #GNOME {{{
      check_repository "ppa:webupd8team/gnome3"
      check_repository "ppa:gnome3-team/gnome3"
      print_title "GNOME"
      package_install "gnome-shell gedit-plugins gnome-tweak-tool"
      package_install "nautilus-image-converter nautilus-open-terminal nautilus-wallpaper"
      #GNOME CUSTOMIZATION {{{
      while [[ 1 ]]
      do
        print_title "GNOME CUSTOMIZATION"
        echo " 1) $(menu_item "faenza-icon-theme faenza-cupertino faience-icon-theme elementary-icon-theme" "GNOME Icons")"
        echo " 2) $(menu_item "shimmer-themes elementary-theme faience-theme adwaita-x-dark-theme adwaita-x-light-theme" "GNOME Themes")"
        echo " 3) $(menu_item "ubuntu-tweak")"
        echo ""
        echo " d) DONE"
        echo ""
        GNOME_OPTIONS+=" d"
        read_input_options "$GNOME_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
          case "$OPT" in
            1)
              install_icons
              OPT=1
              ;;
            2)
              install_themes
              OPT=2
              ;;
            3)
              check_repository "ppa:tualatrix/ppa"
              package_install "ubuntu-tweak"
              ;;
            "d")
              break
              ;;
            *)
              invalid_option
              ;;
          esac
        done
        elihw
      done
      #}}}
      CURRENT_STATUS=1
      GNOME=1
      ;;
    #}}}
    3)
    #KDE {{{
      print_title "KDE"
      print_info "KDE is an international free software community producing an integrated set of cross-platform applications designed to run on Linux, FreeBSD, Microsoft Windows, Solaris and Mac OS X systems. It is known for its Plasma Desktop, a desktop environment provided as the default working environment on many Linux distributions."
      package_install "kubuntu-desktop"
      #QTCURVE THEMES #{{{
      wget http://kde-look.org/CONTENT/content-files/144205-Sweet.tar.gz
      wget http://kde-look.org/CONTENT/content-files/141920-Kawai.tar.gz
      tar zxvf 144205-Sweet.tar.gz
      tar zxvf 141920-Kawai.tar.gz
      rm 144205-Sweet.tar.gz
      rm 141920-Kawai.tar.gz
      mkdir -p /home/$USERNAME/.kde4/share/apps/color-schemes
      mkdir -p /home/$USERNAME/.kde4/share/apps/QtCurve
      mv Sweet/Sweet.colors /home/$USERNAME/.kde4/share/apps/color-schemes
      mv Sweet/Sweet.qtcurve /home/$USERNAME/.kde4/share/apps/QtCurve
      mv Kawai/Kawai.colors /home/$USERNAME/.kde4/share/apps/color-schemes
      mv Kawai/Kawai.qtcurve /home/$USERNAME/.kde4/share/apps/QtCurve
      chown -R $USERNAME:users /home/$USERNAME/.kde4
      rm -fr Kawai Sweet
      #}}}
      #KDE CUSTOMIZATION {{{
      while [[ 1 ]]
      do
        print_title "KDE CUSTOMIZATION"
        echo " 1) $(menu_item "apper")"
        echo " 2) $(menu_item "bangarang")"
        echo " 3) $(menu_item "choqok")"
        echo " 4) $(menu_item "digikam")"
        echo " 5) $(menu_item "k3b")"
        echo " 6) $(menu_item "rosa-icons")"
        echo " 7) $(menu_item "caledonia-bundle plasma-theme-produkt" "Plasma Themes")"
        echo " 8) $(menu_item "yakuake")"
        echo ""
        echo " d) DONE"
        echo ""
        KDE_OPTIONS+=" d"
        read_input_options "$KDE_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
          case "$OPT" in
            1)
              package_install "apper"
              ;;
            2)
              package_install "bangarang"
              ;;
            3)
              package_install "choqok"
              ;;
            4)
              package_install "digikam"
              ;;
            5)
              package_install "k3b dvd+rw-tools"
              ;;
            6)
              download_package "https://abf.rosalinux.ru/import/rosa-icons/raw/rosa2012lts/rosa-1.0.27.tar.gz" "/usr/share/icons/"
              ;;
            7)
              package_install "caledonia-bundle plasma-theme-rosa plasma-theme-produkt ronak-plasmatheme"
              ;;
            8)
              package_install "yakuake"
              package_install "yakuake-skin-plasma-oxygen-panel"
              ;;
            "d")
              break
              ;;
            *)
              invalid_option
              ;;
          esac
        done
        elihw
      done
      #}}}
      CURRENT_STATUS=1
      KDE=1
      ;;
    #}}}
    4)
    #UNITY {{{
      print_title "UNITY"
      apt-get install -y gedit-plugins
      package_install "nautilus-image-converter nautilus-open-terminal nautilus-wallpaper"
      package_remove "unity-lens-shopping"
      #UNITY CUSTOMIZATION {{{
      while [[ 1 ]]
      do
        print_title "UNITY CUSTOMIZATION"
        echo " 1) $(menu_item "faenza-icon-theme faenza-cupertino faience-icon-theme elementary-icon-theme" "GNOME Icons")"
        echo " 2) $(menu_item "shimmer-themes elementary-theme faience-theme adwaita-x-dark-theme adwaita-x-light-theme" "GNOME Themes")"
        echo " 3) $(menu_item "ubuntu-tweak")"
        echo " 4) $(menu_item "unity-lens-* unity-scope-*" "Unity Lens")"
        echo ""
        echo " d) DONE"
        echo ""
        UNITY_OPTIONS+=" d"
        read_input_options "$UNITY_OPTIONS"
        for OPT in ${OPTIONS[@]}; do
          case "$OPT" in
            1)
              install_icons
              OPT=1
              ;;
            2)
              install_themes
              OPT=2
              ;;
            3)
              check_repository "ppa:tualatrix/ppa"
              package_install "ubuntu-tweak"
              ;;
            4)
              #UNITY LENS {{{
              check_repository "ppa:nilarimogard/webupd8"
              check_repository "ppa:scopes-packagers/ppa"
              while [[ 1 ]]
              do
                print_title "UNITY LENS"
                echo " 1) $(menu_item "bookmarks-lens" "unity-lens-bookmarks")"
                echo " 2) $(menu_item "unity-lens-photo")"
                echo " 3) $(menu_item "unity-lens-askubuntu")"
                echo " 4) $(menu_item "unity-lens-cooking")"
                echo " 5) $(menu_item "unity-lens-graphicdesign")"
                echo " 6) $(menu_item "unity-lens-news")"
                echo " 7) $(menu_item "unity-lens-torrents")"
                echo " 8) $(menu_item "unity-lens-wikipedia")"
                echo " 9) $(menu_item "unity-scope-calculator")"
                echo "10) $(menu_item "unity-scope-cities")"
                echo "11) $(menu_item "unity-scope-colourlovers")"
                echo "12) $(menu_item "unity-scope-deviantart")"
                echo "13) $(menu_item "unity-scope-grooveshark")"
                echo "14) $(menu_item "unity-scope-rottentomatoes") (movie review)"
                echo ""
                echo " b) BACK"
                echo ""
                UNITY_LENS+=" b"
                read_input_options "$UNITY_LENS"
                for OPT in ${OPTIONS[@]}; do
                  case "$OPT" in
                    1)
                      package_install "bookmarks-lens"
                      ;;
                    2)
                      package_install "unity-lens-photo unity-scope-flickr unity-scope-shotwell"
                      ;;
                    3)
                      package_install "unity-lens-askubuntu"
                      ;;
                    4)
                      package_install "unity-lens-cooking"
                      ;;
                    5)
                      package_install "unity-lens-graphicdesign"
                      ;;
                    6)
                      package_install "unity-lens-news"
                      ;;
                    7)
                      package_install "unity-lens-torrents unity-scope-piratebay"
                      ;;
                    8)
                      package_install "unity-lens-wikipedia"
                      ;;
                    9)
                      package_install "unity-scope-calculator"
                      ;;
                    10)
                      package_install "unity-lens-utilities unity-scope-cities"
                      ;;
                    11)
                      package_install "unity-scope-colourlovers"
                      ;;
                    12)
                      package_install "unity-scope-deviantart"
                      ;;
                    13)
                      package_install "unity-scope-grooveshark"
                      ;;
                    14)
                      package_install "unity-lens-utilities unity-scope-rottentomatoes"
                      ;;
                    "b")
                      break
                      ;;
                    *)
                      invalid_option
                      ;;
                  esac
                done
                elihw
              done
              #}}}
              OPT=5
              ;;
            "d")
              break
              ;;
            *)
              invalid_option
              ;;
          esac
        done
        elihw
      done
      #}}}
      CURRENT_STATUS=1
      GNOME=1
      ;;
    #}}}
    *)
    CURRENT_STATUS=0
    ;;
  esac
  sumary "Desktop Environment Installation"
  pause_function
}
#}}}
#ACCESSORIES {{{
function install_accessories_apps(){
  while [[ 1 ]]
  do
    print_title "ACCESSORIES APPS"
    echo " 1) $(menu_item "cairo-dock")"
    echo " 2) $(menu_item "conky-all" "Conky")"
    echo " 3) $(menu_item "dockbarx")"
    echo " 4) $(menu_item "docky")"
    echo " 5) $(menu_item "speedcrunch galculator" "$([[ $KDE -eq 1 ]] && echo "Speedcrunch" || echo "Galculator";)")"
    echo " 6) $(menu_item "gnome-pie")"
    echo " 7) $(menu_item "guake")"
    echo " 8) $(menu_item "kupfer")"
    echo " 9) $(menu_item "pyrenamer")"
    echo "10) $(menu_item "shutter")"
    echo "11) $(menu_item "synapse")"
    echo "12) $(menu_item "terminator")"
    echo "13) $(menu_item "zim")"
    echo ""
    echo " b) BACK"
    echo ""
    ACCESSORIES_OPTIONS+=" b"
    read_input_options "$ACCESSORIES_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          package_install "cairo-dock cairo-dock-plugins"
          ;;
        2)
          package_install "toilet figlet cowsay conky-all curl lm-sensors"
          sensors-detect
          ;;
        3)
          package_install "dockbarx"
          ;;
        4)
          package_install "docky"
          ;;
        5)
          if [[ $KDE -eq 1 ]]; then
            package_install "speedcrunch"
          else
            package_install "galculator"
          fi
          ;;
        6)
          package_install "gnome-pie"
          ;;
        7)
          package_install "guake"
          ;;
        8)
          package_install "kupfer"
          ;;
        9)
          package_install "pyrenamer"
          ;;
        10)
          package_install "shutter"
          ;;
        11)
          package_install "synapse"
          ;;
        12)
          package_install "terminator"
          ;;
        13)
          package_install "zim"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#DEVELOPEMENT {{{
function install_development_apps(){
  while [[ 1 ]]
  do
    print_title "DEVELOPMENT APPS"
    echo " 1) $(menu_item "AptanaStudio")"
    echo " 2) $(menu_item "bluefish")"
    echo " 3) $(menu_item "eclipse")"
    echo " 4) $(menu_item "emacs")"
    echo " 5) $(menu_item "vim-gnome")"
    echo " 6) $(menu_item "geany")"
    echo " 7) $(menu_item "netbeans")"
    echo " 8) $(menu_item "oracle-java7-installer" "Oracle Java")"
    echo " 9) $(menu_item "qtcreator")"
    echo "10) $(menu_item "sublime-text" "Sublime Text 2")"
    echo "11) $(menu_item "gdb" "Debugger Tools")"
    echo "12) $(menu_item "mysql-workbench-gpl" "MySQL Workbench")"
    echo "13) $(menu_item "meld")"
    echo "14) $(menu_item "rabbitvcs" "RabbitVCS")"
    echo ""
    echo " b) BACK"
    echo ""
    DEVELOPMENT_OPTIONS+=" b"
    read_input_options "$DEVELOPMENT_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          check_repository "ppa:webupd8team/java"
          package_install "oracle-java7-installer"
          package_install "libjpeg62 libwebkitgtk-1.0-0 git-core"
          if [[ ! -d /opt/Aptana_Studio_3 ]]; then
            download_package "https://d1iwq2e2xrohf.cloudfront.net/tools/studio/standalone/3.2.2.201208201020/linux/Aptana_Studio_3_Setup_Linux_x86_3.2.2.zip" "/opt"
            wget http://www.samclarke.com/wp-content/uploads/2012/04/AptanaStudio3.desktop
            mv AptanaStudio3.desktop /usr/share/applications/AptanaStudio3.desktop
          fi
          ;;
        2)
          package_install "bluefish"
          ;;
        3)
          package_install "eclipse"
          ;;
        4)
          package_install "emacs"
          ;;
        5)
          package_install "vim-gnome exuberant-ctags"
          ;;
        6)
          package_install "geany"
          ;;
        7)
          package_install "netbeans"
          ;;
        8)
          package_remove "openjdk-7-jdk openjdk-7-jre"
          check_repository "ppa:webupd8team/java"
          sudo apt-get install oracle-java7-installer
          ;;
        9)
          package_install "qtcreator qt4-doc qt4-demos"
          sudo -u $USERNAME mkdir -p /home/$USERNAME/.config/Nokia/qtcreator/styles
          sudo -u $USERNAME wget http://angrycoding.googlecode.com/svn/branches/qt-creator-monokai-theme/monokai.xml
          sudo -u $USERNAME mv monokai.xml /home/$USERNAME/.config/Nokia/qtcreator/styles/
          ;;
        10)
          check_repository "ppa:webupd8team/sublime-text-2"
          package_install "sublime-text"
          ;;
        11)
          package_install "valgrind gdb splint tidy pyflakes"
          package_install "nodejs npm"
          sudo npm install -g jslint
          ;;
        12)
          #http://mysql.oss.eznetsols.org/Downloads/MySQLGUITools/
          if [[ $ARCHI == i686 ]]; then
            download_package "http://mysql.oss.eznetsols.org/Downloads/MySQLGUITools/mysql-workbench-gpl-5.2.44-1ubu1204-i386.deb"
          else
            download_package "http://mysql.oss.eznetsols.org/Downloads/MySQLGUITools/mysql-workbench-gpl-5.2.44-1ubu1204-amd64.deb"
          fi
          apt-get install -fy
          ;;
        13)
          package_install "meld"
          ;;
        14)
          if check_package "nautilus" ; then
            package_install "rabbitvcs-nautilus rabbitvcs-gedit"
          else
            package_install "rabbitvcs-cli"
          fi
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#OFFICE {{{
function install_office_apps(){
  while [[ 1 ]]
  do
    print_title "OFFICE APPS"
    echo " 1) $(menu_item "libreoffice-common" "LibreOffice")"
    echo " 2) $(menu_item "goffice calligra" "$([[ $KDE -eq 1 ]] && echo "Calligra" || echo "Abiword + Gnumeric";)")"
    echo " 3) $(menu_item "gwoffice")"
    echo " 4) $(menu_item "texlive-core" "latex")"
    echo " 5) $(menu_item "kchmviewer chmsee" "$([[ $KDE -eq 1 ]] && echo "Kchmviewer" || echo "Chmsee";)")"
    echo " 6) $(menu_item "gcstar")"
    echo " 7) $(menu_item "homebank")"
    echo " 8) $(menu_item "impressive")"
    echo " 9) $(menu_item "nitrotasks")"
    echo "10) $(menu_item "ocrfeeder")"
    echo "11) $(menu_item "xmind")"
    echo "12) $(menu_item "zathura")"
    echo ""
    echo " b) BACK"
    echo ""
    OFFICE_OPTIONS+=" b"
    read_input_options "$OFFICE_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          print_title "LIBREOFFICE"
          package_install "libreoffice libreoffice-l10n-$LANGUAGE_LO lo-menubar"
          package_install "hunspell-$LANGUAGE_HS"
          package_install "aspell-$LANGUAGE_AS"
          if [[ $KDE -eq 1 ]]; then
            package_install "libreoffice-kde4"
          else
            package_install "libreoffice-gnome"
          fi
          ;;
        2)
          if [[ $KDE -eq 1 ]]; then
            package_install "calligra"
          else
            package_install "gnumeric abiword abiword-plugins"
          fi
          package_install "hunspell-$LANGUAGE_HS"
          package_install "aspell-$LANGUAGE_AS"
          ;;
        3)
          check_repository "ppa:tombeckmann/ppa"
          package_install "gwoffice"
          ;;
        4)
          print_title "LATEX"
          package_install "latex-beamer texlive texlive-latex-extra texlive-math-extra"
          if [[ $LANGUAGE == pt_BR ]]; then
            package_install "abntex texlive-lang-portuguese"
          fi
          read_input_text "Install texmaker?"
          [[ $OPTION == y ]] && package_install "texmaker"
          ;;
        5)
          if [[ $KDE -eq 1 ]]; then
            package_install "kchmviewer"
          else
            package_install "chmsee"
          fi
          ;;
        6)
          package_install "gcstar"
          ;;
        7)
          package_install "homebank"
          ;;
        8)
          package_install "impressive"
          ;;
        9)
          check_repository "ppa:cooperjona/nitrotasks"
          package_install "nitrotasks"
          ;;
        10)
          package_install "ocrfeeder tesseract-ocr gocr"
          package_install "aspell-$LANGUAGE_AS"
          ;;
        11)
          if [[ $ARCHI == i686 ]]; then
            download_package "http://www.xmind.net/xmind/downloads/xmind-linux-3.3.0.201208102038_i386.deb"
          else
            download_package "http://www.xmind.net/xmind/downloads/xmind-linux-3.3.0.201208102038_amd64.deb"
          fi
          ;;
        12)
          package_install "zathura"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#SYSTEM TOOLS {{{
function install_system_apps(){
  while [[ 1 ]]
  do
    print_title "SYSTEM TOOLS APPS"
    echo " 1) $(menu_item "gparted")"
    echo " 2) $(menu_item "grsync")"
    echo " 3) $(menu_item "htop")"
    echo " 4) $(menu_item "virtualbox")"
    echo " 5) $(menu_item "webmin")"
    echo " 6) $(menu_item "wine")"
    echo ""
    echo " b) BACK"
    echo ""
    SYSTEMTOOLS_OPTIONS+=" b"
    read_input_options "$SYSTEMTOOLS_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          package_install "gparted"
          ;;
        2)
          package_install "grsync"
          ;;
        3)
          package_install "htop"
          ;;
        4)
          package_install "virtualbox"
          groupadd vboxusers
          gpasswd -a $USERNAME vboxusers
          ;;
        5)
          package_install "webmin"
          ;;
        6)
          package_install "wine wine-gecko winetricks"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#GRAPHICS {{{
function install_graphics_apps(){
  while [[ 1 ]]
  do
    print_title "GRAPHICS APPS"
    echo " 1) $(menu_item "blender")"
    echo " 2) $(menu_item "gimp")"
    echo " 3) $(menu_item "gimp-plugin-registry" "Gimp-plugins")"
    echo " 4) $(menu_item "gthumb")"
    echo " 5) $(menu_item "inkscape")"
    echo " 6) $(menu_item "comix")"
    echo " 7) $(menu_item "mypaint")"
    echo " 8) $(menu_item "scribus")"
    echo " 9) $(menu_item "shotwell")"
    echo "10) $(menu_item "xnviewmp")"
    echo ""
    echo " b) BACK"
    echo ""
    GRAPHICS_OPTIONS+=" b"
    read_input_options "$GRAPHICS_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          package_install "blender"
          ;;
        2)
          package_install "gimp"
          ;;
        3)
          package_install "gimp-resynthesizer gimp-plugin-registry"
          ;;
        4)
          package_install "gthumb"
          ;;
        5)
          package_install "inkscape sozi"
          ;;
        6)
          package_install "comix"
          ;;
        7)
          package_install "mypaint"
          ;;
        8)
          package_install "scribus"
          ;;
        9)
          package_install "shotwell"
          ;;
        10)
          if ls /etc/apt/sources.list.d/ | grep "getdeb" &> /dev/null; then
            echo -e "\nWARNING: Getdeb repository already configured"
          else
            wget -q -O - http://archive.getdeb.net/getdeb-archive.key | sudo apt-key add -
            echo "deb http://archive.getdeb.net/ubuntu precise-getdeb apps" >> /etc/apt/sources.list.d/getdeb.list
            apt-get update
            echo -e "\nGetdeb repository added into sources.list.d direcotry"
          fi
          pause_function
          package_install "xnviewmp"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#INTERNET {{{
function install_internet_apps(){
  while [[ 1 ]]
  do
    print_title "INTERNET APPS"
    echo " 1) Browser"
    echo " 2) Download|Fileshare"
    echo " 3) Email|RSS"
    echo " 4) Instant Messaging"
    echo " 5) IRC"
    echo " 6) Mapping Tools"
    echo " 7) VNC|Desktop Share"
    echo ""
    echo " b) BACK"
    echo ""
    INTERNET_OPTIONS+=" b"
    read_input_options "$INTERNET_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          #BROWSER {{{
          while [[ 1 ]]
          do
            print_title "BROWSER"
            echo " 1) $(menu_item "chromium")"
            echo " 2) $(menu_item "google-chrome")"
            echo " 3) $(menu_item "rekonq midori" "$([[ $KDE -eq 1 ]] && echo "Rekonq" || echo "Midori";)")"
            echo " 4) $(menu_item "firefox")"
            echo " 5) $(menu_item "opera")"
            echo ""
            echo " b) BACK"
            echo ""
            BROWSERS_OPTIONS+=" b"
            read_input_options "$BROWSERS_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "chromium-browser flashplugin-installer"
                  ;;
                2)
                  if [ "$ARCHI" = "i686" ]; then
                    download_package "https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb"
                  else
                    download_package "https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
                  fi
                  package_install "flashplugin-installer"
                  ;;
                3)
                  if [[ $KDE -eq 1 ]]; then
                    package_install "rekonq"
                  else
                    package_install "midori"
                  fi
                  ;;
                4)
                  package_install "firefox firefox-locale-$LANGUAGE_FF flashplugin-installer"
                  ;;
                5)
                  if [ "$ARCHI" = "i686" ]; then
                    download_package "http://get.geo.opera.com/pub/opera/linux/1210/opera_12.10.1652_i386.deb"
                  else
                    download_package "http://get.geo.opera.com/pub/opera/linux/1210/opera_12.10.1652_amd64.deb"
                  fi
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=1
          ;;
        2)
          #DOWNLOAD|FILESHARE {{{
          while [[ 1 ]]
          do
            print_title "DOWNLOAD|FILESHARE"
            echo " 1) $(menu_item "deluge")"
            echo " 2) $(menu_item "dropbox")"
            echo " 3) $(menu_item "jdownloader")"
            echo " 4) $(menu_item "nitroshare")"
            echo " 5) $(menu_item "sparkleshare")"
            echo " 6) $(menu_item "steadyflow")"
            echo " 7) $(menu_item "transmission-qt transmission-gtk" "Transmission")"
            echo ""
            echo " b) BACK"
            echo ""
            DOWNLOAD_OPTIONS+=" b"
            read_input_options "$DOWNLOAD_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "deluge"
                  ;;
                2)
                  if check_package "nautilus" ; then
                    package_install "nautilus-dropbox"
                  else
                    if [ "$ARCHI" = "i686" ]; then
                      su -l $USERNAME --command="cd ~ && wget -O - "http://www.dropbox.com/download?plat=lnx.x86" | tar xzf -"
                    else
                      su -l $USERNAME --command="cd ~ && wget -O - "http://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -"
                    fi
                    su -l $USERNAME --command="~/.dropbox-dist/dropboxd"
                  fi
                  add_daemon "@dropboxd"
                  ;;
                3)
                  check_repository "ppa:jd-team/jdownloader"
                  package_install "jdownloader"
                  ;;
                4)
                  check_repository "ppa:george-edison55/nitroshare"
                  package_install "nitroshare"
                  ;;
                5)
                  package_install "sparkleshare"
                  ;;
                6)
                  package_install "steadyflow"
                  ;;
                7)
                  if [[ $KDE -eq 1 ]]; then
                    package_install "transmission-qt"
                  else
                    package_install "transmission-gtk"
                  fi
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=2
          ;;
        3)
          #EMAIL {{{
          while [[ 1 ]]
          do
            print_title "EMAIL|RSS"
            echo " 1) $(menu_item "thunderbird")"
            echo " 2) $(menu_item "liferea")"
            echo " 3) $(menu_item "lightread")"
            echo ""
            echo " b) BACK"
            echo ""
            EMAIL_OPTIONS+=" b"
            read_input_options "$EMAIL_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "thunderbird thunderbird-locale-$LANGUAGE_FF"
                  ;;
                2)
                  package_install "liferea"
                  ;;
                3)
                  check_repository "ppa:cooperjona/lightread"
                  package_install "lightread"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=3
          ;;
        4)
          #IM {{{
          while [[ 1 ]]
          do
            print_title "IM - INSTANT MESSAGING"
            echo " 1) $(menu_item "emesene")"
            echo " 2) $(menu_item "google-talkplugin")"
            echo " 3) $(menu_item "pidgin")"
            echo " 4) $(menu_item "skype")"
            echo " 5) $(menu_item "teamspeak-client")"
            echo ""
            echo " b) BACK"
            echo ""
            IM_OPTIONS+=" b"
            read_input_options "$IM_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  check_repository "ppa:emesene-team/emesene-stable"
                  package_install "emesene"
                  ;;
                2)
                  if [ "$ARCHI" = "i686" ]; then
                    download_package "https://dl.google.com/linux/direct/google-talkplugin_current_i386.deb"
                  else
                    download_package "https://dl.google.com/linux/direct/google-talkplugin_current_amd64.deb"
                  fi
                  ;;
                3)
                  package_install "pidgin"
                  ;;
                4)
                  download_package "http://download.skype.com/linux/skype-ubuntu-precise_4.1.0.20-1_i386.deb"
                  ;;
                5)
                  package_install "teamspeak-client"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=4
          ;;
        5)
          #IRC {{{
          while [[ 1 ]]
          do
            print_title "IRC"
            echo " 1) $(menu_item "irssi")"
            echo " 2) $(menu_item "quassel xchat" "$([[ $KDE -eq 1 ]] && echo "Quassel" || echo "X-Chat";)")"
            echo ""
            echo " b) BACK"
            echo ""
            IRC_OPTIONS+=" b"
            read_input_options "$IRC_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "irssi"
                  ;;
                2)
                  if [[ $KDE -eq 1 ]]; then
                    package_install "quassel"
                  else
                    package_install "xchat"
                  fi
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=5
          ;;
        6)
          #MAPPING {{{
          while [[ 1 ]]
          do
            print_title "MAPPING TOOLS"
            echo " 1) $(menu_item "google-earth")"
            echo " 2) $(menu_item "worldwind" "NASA World Wind")"
            echo ""
            echo " b) BACK"
            echo ""
            MAPPING_OPTIONS+=" b"
            read_input_options "$MAPPING_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  if [ "$ARCHI" = "i686" ]; then
                    download_package "http://dl.google.com/dl/earth/client/current/google-earth-stable_current_i386.deb"
                  else
                    download_package "http://dl.google.com/dl/earth/client/current/google-earth-stable_current_amd64.deb"
                  fi
                  ;;
                2)
                  package_install "worldwind"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=6
          ;;
        7)
          #DESKTOP SHARE {{{
          while [[ 1 ]]
          do
            print_title "DESKTOP SHARE"
            echo " 1) $(menu_item "remmina")"
            echo " 2) $(menu_item "teamviewer") $AUR"
            echo ""
            echo " b) BACK"
            echo ""
            VNC_OPTIONS+=" b"
            read_input_options "$VNC_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "remmina"
                  ;;
                2)
                  download_package "http://www.teamviewer.com/download/teamviewer_linux.deb"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=7
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#LAMP #{{{
function install_lamp(){
  print_title "WEB SERVER"
  echo " 1) LAMP - APACHE, MYSQL & PHP + ADMINER"
  echo " 2) LAPP - APACHE, POSTGRESQL & PHP + ADMINER"
  echo ""
  echo " b) BACK"
  echo ""
  read_input $WEBSERVER
  case "$OPTION" in
    1)
      apt-get install -y tasksel
      tasksel install lamp-server
      apt-get install -y phpmyadmin
      a2enmod userdir
      CURRENT_STATUS=1
      sumary "LAMP installation"
      create_sites_folder
      ;;
    2)
      package_install "apache2 libapache2-mod-php5 postgresql"
      a2enmod php5
      a2enmod userdir
      CURRENT_STATUS=1
      sumary "LAPP installation"
      create_sites_folder
      ;;
  esac
}
#}}}
#AUDIO {{{
install_audio_apps(){
  while [[ 1 ]]
  do
    print_title "AUDIO APPS"
    echo " 1) Players"
    echo " 2) Editors|Tools"
    echo " 3) Codecs"
    echo ""
    echo " b) BACK"
    echo ""
    AUDIO_OPTIONS+=" b"
    read_input_options "$AUDIO_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          #PLAYERS {{{
          while [[ 1 ]]
          do
            print_title "AUDIO PLAYERS"
            echo " 1) $(menu_item "amarok")"
            echo " 2) $(menu_item "audacious")"
            echo " 3) $(menu_item "banshee")"
            echo " 4) $(menu_item "clementine")"
            echo " 5) $(menu_item "deadbeef")"
            echo " 6) $(menu_item "exaile")"
            echo " 7) $(menu_item "musique")"
            echo " 8) $(menu_item "nuvolaplayer")"
            echo " 9) $(menu_item "rhythmbox")"
            echo "10) $(menu_item "radiotray")"
            echo "11) $(menu_item "spotify")"
            echo "12) $(menu_item "tomahawk")"
            echo "13) $(menu_item "timidity++")"
            echo ""
            echo " b) BACK"
            echo ""
            AUDIO_PLAYER_OPTIONS+=" b"
            read_input_options "$AUDIO_PLAYER_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  package_install "amarok"
                  ;;
                2)
                  package_install "audacious audacious-plugins"
                  ;;
                3)
                  package_install "banshee"
                  ;;
                4)
                  package_install "clementine"
                  ;;
                5)
                  package_install "deadbeef"
                  ;;
                6)
                  package_install "exaile"
                  ;;
                7)
                  package_install "musique"
                  ;;
                8)
                  check_repository "ppa:nuvola-player-builders/stable"
                  package_install "nuvolaplayer"
                  ;;
                9)
                  package_install "rhythmbox"
                  ;;
                10)
                  package_install "radiotray"
                  ;;
                11)
                  if ls /etc/apt/sources.list.d/ | grep "spotify" &> /dev/null; then
                    echo -e "\nWARNING: spotify-stable repository already configured"
                  else
                    echo "deb http://repository.spotify.com stable non-free" > /etc/apt/sources.list.d/spotify-stable.list
                    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 94558F59
                    apt-get update
                    echo -e "\nspotify-stable repository added into sources.list.d direcotry"
                  fi
                  pause_function
                  package_install "spotify"
                  ;;
                12)
                  check_repository "ppa:tomahawk/ppa"
                  package_install "tomahawk"
                  ;;
                13)
                  package_install "timidity fluid-soundfont-gs"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=1
          ;;
        2)
          #EDITORS {{{
          while [[ 1 ]]
          do
            print_title "AUDIO EDITORS|TOOLS"
            echo " 1) $(menu_item "soundconverter soundkonverter" "$([[ $KDE -eq 1 ]] && echo "Soundkonverter" || echo "Soundconverter";)")"
            echo " 2) $(menu_item "puddletag")"
            echo " 3) $(menu_item "audacity")"
            echo " 4) $(menu_item "ocenaudio")"
            echo ""
            echo " b) BACK"
            echo ""
            AUDIO_EDITOR_OPTIONS+=" b"
            read_input_options "$AUDIO_EDITOR_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  if [[ $KDE -eq 1 ]]; then
                    package_install "soundkonverter"
                  else
                    package_install "soundconverter"
                  fi
                  ;;
                2)
                  package_install "puddletag"
                  ;;
                3)
                  package_install "audacity"
                  ;;
                4)
                  if [ "$ARCHI" = "i686" ]; then
                    download_package "http://www.ocenaudio.com.br/downloads/ocenaudio32.deb"
                  else
                    download_package "http://www.ocenaudio.com.br/downloads/ocenaudio64.deb"
                  fi
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=2
          ;;
        3)
          package_install "ubuntu-restricted-extras"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#VIDEO {{{
install_video_apps(){
  while [[ 1 ]]
  do
    print_title "VIDEO APPS"
    echo " 1) Players"
    echo " 2) Editors|Tools"
    echo " 3) Codecs"
    echo ""
    echo " b) BACK"
    echo ""
    VIDEO_OPTIONS+=" b"
    read_input_options "$VIDEO_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          #PLAYERS {{{
          while [[ 1 ]]
          do
            print_title "VIDEO PLAYERS"
            echo " 1) $(menu_item "audience")"
            echo " 2) $(menu_item "gnome-mplayer")"
            echo " 3) $(menu_item "parole")"
            echo " 4) $(menu_item "minitube")"
            echo " 5) $(menu_item "miro")"
            echo " 6) $(menu_item "smplayer")"
            echo " 7) $(menu_item "vlc")"
            echo " 8) $(menu_item "xbmc")"
            echo ""
            echo " b) BACK"
            echo ""
            VIDEO_PLAYER_OPTIONS+=" b"
            read_input_options "$VIDEO_PLAYER_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  check_repository "ppa:elementary-os/testing"
                  check_repository "ppa:vala-team/ppa"
                  check_repository "ppa:audience-members/ppa"
                  package_install "audience"
                  ;;
                2)
                  package_install "gnome-mplayer"
                  ;;
                3)
                  package_install "parole"
                  ;;
                4)
                  package_install "minitube"
                  ;;
                5)
                  package_install "miro"
                  ;;
                6)
                  package_install "smplayer smplayer-themes"
                  ;;
                7)
                  package_install "vlc"
                  ;;
                8)
                  package_install "xbmc"
                  gpasswd -a $USERNAME xbmc
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=1
          ;;
        2)
          #EDITORS {{{
          while [[ 1 ]]
          do
            print_title "VIDEO EDITORS|TOOLS"
            echo " 1) $(menu_item "avidemux-gtk avidemux-qt" "Avidemux")"
            echo " 2) $(menu_item "arista" "Arista")"
            echo " 3) $(menu_item "transmageddon")"
            echo " 4) $(menu_item "kdeenlive")"
            echo " 5) $(menu_item "openshot")"
            echo " 6) $(menu_item "pitivi")"
            echo " 7) $(menu_item "kazam")"
            echo ""
            echo " b) BACK"
            echo ""
            VIDEO_EDITOR_OPTIONS+=" b"
            read_input_options "$VIDEO_EDITOR_OPTIONS"
            for OPT in ${OPTIONS[@]}; do
              case "$OPT" in
                1)
                  if [[ $KDE -eq 1 ]]; then
                    package_install "avidemux-qt"
                  else
                    package_install "avidemux-gtk"
                  fi
                  ;;
                2)
                  package_install "arista"
                  ;;
                3)
                  package_install "transmageddon"
                  ;;
                4)
                  package_install "kdenlive"
                  ;;
                5)
                  package_install "openshot"
                  ;;
                6)
                  package_install "pitivi"
                  ;;
                7)
                  package_install "kazam"
                  ;;
                "b")
                  break
                  ;;
                *)
                  invalid_option
                  ;;
              esac
            done
            elihw
          done
          #}}}
          OPT=2
          ;;
        3)
          if ls /etc/apt/sources.list.d/ | grep "medibuntu" &> /dev/null; then
            echo -e "\nWARNING: medibuntu repository already configured"
          else
            wget --output-document=/etc/apt/sources.list.d/medibuntu.list http://www.medibuntu.org/sources.list.d/$(lsb_release -cs).list
            apt-get update
            apt-get --yes --quiet --allow-unauthenticated install medibuntu-keyring
            apt-get update
          fi
          package_install "libdvdread4 libdvdnav4 libquicktime2 libdvdcss2 cdrdao"
          if [ "$ARCHI" = "i686" ]; then
            package_install "w32codecs"
          else
            package_install "w64codecs"
          fi
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#FONTS {{{
function install_fonts(){
  while [[ 1 ]]
  do
    print_title "FONTS"
    echo " 1) $(menu_item "ttf-dejavu")"
    echo " 2) $(menu_item "ttf-google-webfonts")"
    echo " 3) $(menu_item "ttf-liberation")"
    echo " 4) $(menu_item "ttf-mscorefonts-installer")"
    echo ""
    echo " b) BACK"
    echo ""
    FONTS_OPTIONS+=" b"
    read_input_options "$FONTS_OPTIONS"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          package_install "ttf-dejavu"
          ;;
        2)
          echo -e "\nWARNING: Install time can be > 20min"
          read_input_text "Are you sure you want to continue?" $GOOGLE_FONTS
          if [[ $OPTION == n ]]; then continue; fi
          cd && wget http://webupd8.googlecode.com/files/install-google-fonts
          chmod +x install-google-fonts
          ./install-google-fonts
          ;;
        3)
          package_install "ttf-liberation"
          ;;
        4)
          package_install "ttf-mscorefonts-installer"
          ;;
        "b")
          break
          ;;
        *)
          invalid_option
          ;;
      esac
    done
    elihw
  done
}
#}}}
#CLEAN ORPHAN PACKAGES {{{
function clean_orphan_packages(){
  print_title "CLEAN ORPHAN PACKAGES"
  apt-get autoremove --purge -y
}
#}}}
#FINISH {{{
function finish(){
  print_title "INSTALL COMPLETED"
  echo "Thanks for using the Ubuntu Ultimate Install script by helmuthdu"
  exit 0
}
#}}}

#MAIN {{{
  welcome
  check_root
  language_selector
  system_upgrade
  select_user
  select_pkgmanager
  automatic_mode

  while [[ 1 ]]
  do
    print_title "UBUNTU ULTIMATE INSTALL - https://github.com/helmuthdu/uui"
    echo " 1) $(mainmenu_item $BASICSETUP "Basic Setup")"
    echo " 2) $(mainmenu_item $DESKTOPENVIRONMENT "Desktop Environment")"
    echo " 3) $(mainmenu_item $ACCESSORIES "Accessories Apps")"
    echo " 4) $(mainmenu_item $DEVELOPMENT "Development Apps")"
    echo " 5) $(mainmenu_item $OFFICE "Office Apps")"
    echo " 6) $(mainmenu_item $SYSTEM "System Apps")"
    echo " 7) $(mainmenu_item $GRAPHICS "Graphics Apps")"
    echo " 8) $(mainmenu_item $INTERNET "Internet Apps")"
    echo " 9) $(mainmenu_item $AUDIO "Audio Apps")"
    echo "10) $(mainmenu_item $VIDEO "Video Apps")"
    echo "11) $(mainmenu_item $LAMP "LAMP")"
    echo "12) $(mainmenu_item $FONTS "Fonts")"
    echo "13) $(mainmenu_item $CLEANPACKAGES "Clean Orphan Packages")"
    echo ""
    echo " q) Quit"
    echo ""
    MAINMENU+=" q"
    read_input_options "$MAINMENU"
    for OPT in ${OPTIONS[@]}; do
      case "$OPT" in
        1)
          custom_repositories
          install_basic_setup
          install_video_cards
          install_git_tor
          CURRENT_STATUS=1
          sumary "Basic setup installation"
          pause_function
          BASICSETUP=1
          ;;
        2)
          if [[ $BASICSETUP -eq 0 ]]; then
            echo -e "\nWARNING: YOU MUST RUN THE BASIC SETUP FIRST"
            read_input_text "Are you sure you want to continue?"
            if [[ $OPTION == n ]]; then continue; fi
          fi
          install_desktop_environment
          install_nm_wicd
          DESKTOPENVIRONMENT=1
          ;;
        3)
          install_accessories_apps
          ACCESSORIES=1
          ;;
        4)
          install_development_apps
          DEVELOPMENT=1
          ;;
        5)
          install_office_apps
          OFFICE=1
          ;;
        6)
          install_system_apps
          SYSTEM=1
          ;;
        7)
          install_graphics_apps
          GRAPHICS=1
          ;;
        8)
          install_internet_apps
          INTERNET=1
          ;;
        9)
          install_audio_apps
          AUDIO=1
          ;;
        10)
          install_video_apps
          VIDEO=1
          ;;
        11)
          install_lamp
          LAMP=1
          ;;
        12)
          install_fonts
          FONTS=1
          ;;
        13)
          clean_orphan_packages
          CLEANPACKAGES=1
          ;;
        "q")
          finish
          ;;
        *)
          invalid_option
          ;;
      esac
    done
  done
#}}}
